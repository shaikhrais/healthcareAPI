version: '3.8'

services:
  # HealthCare API Service
  healthcare-api:
    build:
      context: ..
      dockerfile: Dockerfile
    container_name: healthcare-api-prod
    restart: unless-stopped
    env_file:
      - .env.production
    networks:
      - traefik-proxy
      - healthcare-internal
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - api_logs:/app/logs
      - api_uploads:/app/uploads
    labels:
      # Traefik configuration
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-proxy"
      
      # Main API routes
      - "traefik.http.routers.healthcare-api.rule=Host(`api.yourdomain.com`) || Host(`healthcare.yourdomain.com`)"
      - "traefik.http.routers.healthcare-api.entrypoints=websecure"
      - "traefik.http.routers.healthcare-api.tls.certresolver=letsencrypt"
      - "traefik.http.services.healthcare-api.loadbalancer.server.port=3001"
      
      # Health check route
      - "traefik.http.routers.healthcare-health.rule=Host(`api.yourdomain.com`) && Path(`/health`)"
      - "traefik.http.routers.healthcare-health.entrypoints=websecure"
      - "traefik.http.routers.healthcare-health.tls.certresolver=letsencrypt"
      - "traefik.http.routers.healthcare-health.priority=100"
      
      # Security headers
      - "traefik.http.routers.healthcare-api.middlewares=security-headers,rate-limit"
      - "traefik.http.middlewares.security-headers.headers.frameDeny=true"
      - "traefik.http.middlewares.security-headers.headers.sslRedirect=true"
      - "traefik.http.middlewares.security-headers.headers.browserXssFilter=true"
      - "traefik.http.middlewares.security-headers.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.security-headers.headers.forceSTSHeader=true"
      - "traefik.http.middlewares.security-headers.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.security-headers.headers.stsPreload=true"
      - "traefik.http.middlewares.security-headers.headers.stsSeconds=31536000"
      
      # Rate limiting
      - "traefik.http.middlewares.rate-limit.ratelimit.average=100"
      - "traefik.http.middlewares.rate-limit.ratelimit.burst=200"
      - "traefik.http.middlewares.rate-limit.ratelimit.period=1m"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: healthcare-mongodb-prod
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: healthcare
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./mongodb-init:/docker-entrypoint-initdb.d:ro
    networks:
      - healthcare-internal
    command: mongod --auth --bind_ip_all --replSet rs0
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis Cache & Session Store
  redis:
    image: redis:7.2-alpine
    container_name: healthcare-redis-prod
    restart: unless-stopped
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - healthcare-internal
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Database Backup Service
  mongodb-backup:
    image: mongo:7.0
    container_name: healthcare-backup
    restart: "no"
    environment:
      MONGO_URI: mongodb://admin:${MONGO_ROOT_PASSWORD}@mongodb:27017/healthcare?authSource=admin
      BACKUP_RETENTION_DAYS: 30
    volumes:
      - backup_data:/backups
      - ./scripts/backup.sh:/usr/local/bin/backup.sh:ro
    networks:
      - healthcare-internal
    depends_on:
      mongodb:
        condition: service_healthy
    profiles:
      - backup
    entrypoint: ["bash", "/usr/local/bin/backup.sh"]

  # Log Management (optional)
  logrotate:
    image: alpine:latest
    container_name: healthcare-logrotate
    restart: unless-stopped
    volumes:
      - api_logs:/logs
      - ./scripts/logrotate.sh:/usr/local/bin/logrotate.sh:ro
    command: ["sh", "-c", "while true; do /usr/local/bin/logrotate.sh; sleep 3600; done"]
    profiles:
      - logging

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local
  api_logs:
    driver: local
  api_uploads:
    driver: local
  backup_data:
    driver: local

networks:
  traefik-proxy:
    external: true
    name: traefik-proxy
  healthcare-internal:
    internal: true
    driver: bridge